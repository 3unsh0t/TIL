// 2중 루프는 아니지만 stream의 filter 사용으로 타임초과...

class Solution {
    public int waysToMakeFair(int[] nums) {
        int result = 0;
        int[] copy = new int[nums.length-1];
        for(int i = 0; i<nums.length;i++){
            int pair = 0; //짝
            int odd = 0; //홀

            // i보다 작은건 짝홀 그대로
            // i보다 큰건 짝홀 반대로
            if(i>0){
                pair += IntStream.range(0,i).filter(index-> index%2==0).map(index-> nums[index]).sum();
                //Arrays.stream(nums,0,i).filter((element,index)-> index%2==0).sum();
                odd += IntStream.range(0,i).filter(index-> index%2!=0).map(index-> nums[index]).sum();
            }
            pair += IntStream.range(i+1,nums.length).filter(index-> index%2!=0).map(index-> nums[index]).sum();
            odd += IntStream.range(i+1,nums.length).filter(index-> index%2==0).map(index-> nums[index]).sum();

            if(pair == odd){
                result++;
            }
        }
        return result;
    }
}
